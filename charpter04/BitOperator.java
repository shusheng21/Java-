package charpter04;

public class BitOperator {
    public static void main(String[] args) {
/*
 * - 二进制的最高位是符号位:**0表示正数,1表示负数**(老韩口诀:0->0  1->-)
- **正数**的原码，反码，补码都一样(**三码合一**)
- 负数的反码=它的原码符号位不变，其它位取反**(0->1,1->0**)
- 负数的补码=它的反码+1，负数的反码=负数的补码-1
- 0的反码，补码都是0
- java没有无符号数，换言之，java中的数都是有符号的
- 在计算机运算的时候，都是以**补码的方式来运算**的.
- 当我们**看运算结果**的时候,要看他的**原码**(重点)
 * 
 */


        //推导 int 类型占4个字节  每个字节8位
// 2的原码 00000000 00000000 00000000 00000010
//2进制最高位是0，为正数，因正数的原码、反码、补码一样
// 2的补码 00000000 00000000 00000000 00000010
// 3的补码 00000000 00000000 00000000 00000011
//2&3 补码 00000000 00000000 00000000 00000010
//2&3 原码 00000000 00000000 00000000 00000010
// 2&3 结果为2
        System.out.println(2&3); // 2 

        //推导
// -2的原码 10000000 00000000 00000000 00000010
// -2的反码 11111111 11111111 11111111 11111101
// -2的补码 11111111 11111111 11111111 11111110
//~-2的补码 00000000 00000000 00000000 00000001
//~-2的原码 00000000 00000000 00000000 00000001
//所以~-2 = 1
        System.out.println(~-2); //1

        //推导
// 2的原码 00000000 00000000 00000000 00000010
// 2的补码 00000000 00000000 00000000 00000010
//~2的补码 11111111 11111111 11111111 11111101
//~2的反码 11111111 11111111 11111111 11111100
//~2的原码 10000000 00000000 00000000 00000011
//所以~2 = -3
        System.out.println(~2); //-3

        //推导
// 2的原码 00000000 00000000 00000000 00000010
// 2的补码 00000000 00000000 00000000 00000010
// 3的补码 00000000 00000000 00000000 00000011
//2|3补码  00000000 00000000 00000000 00000011
//2|3原码  00000000 00000000 00000000 00000011
//所以2|3 = 3
        System.out.println(2|3); //3

        //推导
// 2的原码 00000000 00000000 00000000 00000010
// 2的补码 00000000 00000000 00000000 00000010
// 3的补码 00000000 00000000 00000000 00000011
//2^3补码  00000000 00000000 00000000 00000001
//2^3原码  00000000 00000000 00000000 00000001
//所以2^3 = 1
        System.out.println(2^3); //1

        //本章作业
//字符串转成基本数据类型
        String str = "123.5";
        double d1 = Double.parseDouble(str);
        System.out.println(d1);
    }
}
 